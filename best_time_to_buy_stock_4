class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        vector<vector<int>> prev (2,vector<int>(k+1,0));
        vector<vector<int>> curr (2,vector<int>(k+1,0));
        int n = prices.size();
        // for(int i=0; i<=1; i++){
        //     for(int j=0; j<=k; j++){
        //         dp[n][i][j] = 0;
        //     }
        // }
        // for(int i=0; i<=n; i++){
        //         dp[i][0][0] = 0;
        //         dp[i][1][0] = 0;
        // }
        for(int index=n-1; index>=0; index--){
            for(int buy=0; buy<=1; buy++){
                for(int cap=1; cap<=k; cap++){
                    if(buy ==1)
                        {
                            int profit = -prices[index] + prev[0][cap];
                            int no_profit = prev[1][cap];
                             curr[buy][cap] = max(profit,no_profit);
                        }
                        else{
                            int profit = +prices[index] + prev[1][cap-1];
                            int no_profit = prev[0][cap];
                             curr[buy][cap] = max(profit,no_profit);
                        }
                }
            }
            prev = curr;
        }
        
        return prev[1][k];
        // return recur(0,1,2,prices,dp);
        
    }
};